[{"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\reportWebVitals.js":"1","C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\App.js":"2","C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\pages\\Record\\Record.js":"3","C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\index.js":"4","C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\components\\Camera.js":"5","C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\components\\utils.js":"6","C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\pages\\Record\\utils.js":"7","C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\pages\\Record\\history.js":"8","C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\pages\\Record\\DemoRecord.js":"9"},{"size":362,"mtime":1610817124884,"results":"10","hashOfConfig":"11"},{"size":790,"mtime":1610874124047,"results":"12","hashOfConfig":"11"},{"size":3111,"mtime":1610875411574,"results":"13","hashOfConfig":"11"},{"size":500,"mtime":1610817124884,"results":"14","hashOfConfig":"11"},{"size":4757,"mtime":1610847142464,"results":"15","hashOfConfig":"11"},{"size":1817,"mtime":1610847175454,"results":"16","hashOfConfig":"11"},{"size":7386,"mtime":1610873926505,"results":"17","hashOfConfig":"11"},{"size":86,"mtime":1610862211147,"results":"18","hashOfConfig":"11"},{"size":15377,"mtime":1610873965349,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x3jplo",{"filePath":"22","messages":"23","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":7,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\App.js",["39","40","41","42","43","44","45","46","47","48"],"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\pages\\Record\\Record.js",["49"],"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\index.js",[],"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\components\\Camera.js",["50"],"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\components\\utils.js",[],"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\pages\\Record\\utils.js",["51","52","53","54","55","56","57","58","59","60","61","62"],"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\pages\\Record\\history.js",[],"C:\\Users\\ifels\\Documents\\GitHub\\HackDavis-2021\\my-app\\src\\pages\\Record\\DemoRecord.js",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83"],"import * as posenet from '@tensorflow-models/posenet';\r\nimport React, { useRef } from \"react\";\r\n\r\nimport dat from 'dat.gui';\r\nimport FPSStats from 'react-fps-stats';\r\n\r\nimport {drawBoundingBox, drawKeypoints, drawSkeleton, isMobile, toggleLoadingUI, global_zero} from './utils';\r\nfunction DemoRecord(){\r\nconst videoWidth = 600;\r\nconst videoHeight = 500;\r\nvar rep_count = 0;\r\nvar wko_started = 0;\r\nvar done = 0;\r\nvar timer = 0;\r\nvar t0 = 0;\r\nvar count_down = 0;\r\nvar act_dur = 0;\r\nvar last_rep = 0;\r\nconst stats = new FPSStats();\r\n\r\n/**\r\n * Loads a the camera to be used in the demo\r\n *\r\n */\r\nasync function setupCamera() {\r\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n    throw new Error(\r\n        'Browser API navigator.mediaDevices.getUserMedia not available');\r\n  }\r\n\r\n  const video = document.getElementById('video');\r\n  video.width = videoWidth;\r\n  video.height = videoHeight;\r\n\r\n  const mobile = isMobile();\r\n  const stream = await navigator.mediaDevices.getUserMedia({\r\n    'audio': false,\r\n    'video': {\r\n      facingMode: 'user',\r\n      width: mobile ? undefined : videoWidth,\r\n      height: mobile ? undefined : videoHeight,\r\n    },\r\n  });\r\n  video.srcObject = stream;\r\n\r\n  return new Promise((resolve) => {\r\n    video.onloadedmetadata = () => {\r\n      resolve(video);\r\n    };\r\n  });\r\n}\r\n\r\nasync function loadVideo() {\r\n  const video = await setupCamera();\r\n  video.play();\r\n\r\n  return video;\r\n}\r\n\r\nconst defaultQuantBytes = 2;\r\n\r\nconst defaultMobileNetMultiplier = isMobile() ? 0.50 : 0.75;\r\nconst defaultMobileNetStride = 16;\r\nconst defaultMobileNetInputResolution = 500;\r\n\r\nconst guiState = {\r\n  algorithm: 'multi-pose',\r\n  input: {\r\n    architecture: 'MobileNetV1',\r\n    outputStride: defaultMobileNetStride,\r\n    inputResolution: defaultMobileNetInputResolution,\r\n    multiplier: defaultMobileNetMultiplier,\r\n    quantBytes: defaultQuantBytes\r\n  },\r\n  activity: {\r\n    Activity: 'Weight Lifting',\r\n    Repetitions: 10,\r\n    Duration_min: 60\r\n  },\r\n  singlePoseDetection: {\r\n    minPoseConfidence: 0.1,\r\n    minPartConfidence: 0.5,\r\n  },\r\n  multiPoseDetection: {\r\n    maxPoseDetections: 5,\r\n    minPoseConfidence: 0.15,\r\n    minPartConfidence: 0.1,\r\n    nmsRadius: 30.0,\r\n  },\r\n  output: {\r\n    showVideo: true,\r\n    showSkeleton: true,\r\n    showPoints: true,\r\n    showBoundingBox: false,\r\n  },\r\n  net: null,\r\n};\r\n\r\n/**\r\n * Sets up dat.gui controller on the top-right of the window\r\n */\r\nfunction setupGui(cameras, net) {\r\n  guiState.net = net;\r\n\r\n  if (cameras.length > 0) {\r\n    guiState.camera = cameras[0].deviceId;\r\n  }\r\n\r\n  const gui = new dat.GUI({width: 300});\r\n\r\n\r\n  let architectureController = null;\r\n  // guiState[tryResNetButtonName] = function() {\r\n  //   architectureController.setValue('ResNet50')\r\n  // };\r\n  //gui.add(guiState, tryResNetButtonName).name(tryResNetButtonText);\r\n  //updateTryResNetButtonDatGuiCss();\r\n\r\n  // The single-pose algorithm is faster and simpler but requires only one\r\n  // person to be in the frame or results will be innaccurate. Multi-pose works\r\n  // for more than 1 person\r\n  const algorithmController =\r\n      gui.add(guiState, 'algorithm', ['single-pose', 'multi-pose']);\r\n\r\n  // The input parameters have the most effect on accuracy and speed of the\r\n  // network\r\n\r\n  let activityController = null;\r\n\r\n  let activity = gui.addFolder('Workout');\r\n  activityController =\r\n      activity.add(guiState.activity, 'Activity', ['Weight Lifting', 'Jumping jack']);\r\n  guiState.atividade = guiState.activity.activity;\r\n  activity.add(guiState.activity, 'Repetitions', 0, 50);\r\n  activity.add(guiState.activity, 'Duration_min', 0, 180).name('Duration (sec)');\r\n  var obj = { add:function(){ \r\n    console.log(\"clicked\");  \r\n    rep_count = 0;\r\n    count_down = 0;\r\n    wko_started = 1\r\n    done = 0\r\n    global_zero();\r\n    \r\n  }};\r\n\r\n  activity.add(obj,'add').name('Start Workout');\r\n  activity.open();\r\n\r\n  let single = gui.addFolder('Single Pose Detection');\r\n  single.add(guiState.singlePoseDetection, 'minPoseConfidence', 0.0, 1.0);\r\n  single.add(guiState.singlePoseDetection, 'minPartConfidence', 0.0, 1.0);\r\n\r\n  let multi = gui.addFolder('Multi Pose Detection');\r\n  multi.add(guiState.multiPoseDetection, 'maxPoseDetections')\r\n      .min(1)\r\n      .max(20)\r\n      .step(1);\r\n  multi.add(guiState.multiPoseDetection, 'minPoseConfidence', 0.0, 1.0);\r\n  multi.add(guiState.multiPoseDetection, 'minPartConfidence', 0.0, 1.0);\r\n  // nms Radius: controls the minimum distance between poses that are returned\r\n  // defaults to 20, which is probably fine for most use cases\r\n  multi.add(guiState.multiPoseDetection, 'nmsRadius').min(0.0).max(40.0);\r\n  multi.open();\r\n\r\n  let output = gui.addFolder('Output');\r\n  output.add(guiState.output, 'showVideo');\r\n  output.add(guiState.output, 'showSkeleton');\r\n  output.add(guiState.output, 'showPoints');\r\n  output.add(guiState.output, 'showBoundingBox');\r\n  output.open();\r\n\r\n\r\n  algorithmController.onChange(function(value) {\r\n    switch (guiState.algorithm) {\r\n      case 'single-pose':\r\n        multi.close();\r\n        single.open();\r\n        break;\r\n      case 'multi-pose':\r\n        single.close();\r\n        multi.open();\r\n        break;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Sets up a frames per second panel on the top-left of the window\r\n */\r\nfunction setupFPS() {\r\n  stats.showPanel(0);  // 0: fps, 1: ms, 2: mb, 3+: custom\r\n  document.getElementById('main').appendChild(stats.dom);\r\n}\r\n\r\n/**\r\n * Feeds an image to posenet to estimate poses - this is where the magic\r\n * happens. This function loops with a requestAnimationFrame method.\r\n */\r\nfunction detectPoseInRealTime(video, net) {\r\n  const canvas = document.getElementById('output');\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  // since images are being fed from a webcam, we want to feed in the\r\n  // original image and then just flip the keypoints' x coordinates. If instead\r\n  // we flip the image, then correcting left-right keypoint pairs requires a\r\n  // permutation on all the keypoints.\r\n  const flipPoseHorizontal = true;\r\n\r\n  canvas.width = videoWidth;\r\n  canvas.height = videoHeight;\r\n\r\n  async function poseDetectionFrame() {\r\n    if (guiState.changeToArchitecture) {\r\n      // Important to purge variables and free up GPU memory\r\n      guiState.net.dispose();\r\n      toggleLoadingUI(true);\r\n      guiState.net = await posenet.load({\r\n        architecture: guiState.changeToArchitecture,\r\n        outputStride: guiState.outputStride,\r\n        inputResolution: guiState.inputResolution,\r\n        multiplier: guiState.multiplier,\r\n      });\r\n      toggleLoadingUI(false);\r\n      guiState.architecture = guiState.changeToArchitecture;\r\n      guiState.changeToArchitecture = null;\r\n    }\r\n\r\n    if (guiState.changeToMultiplier) {\r\n      guiState.net.dispose();\r\n      toggleLoadingUI(true);\r\n      guiState.net = await posenet.load({\r\n        architecture: guiState.architecture,\r\n        outputStride: guiState.outputStride,\r\n        inputResolution: guiState.inputResolution,\r\n        multiplier: +guiState.changeToMultiplier,\r\n        quantBytes: guiState.quantBytes\r\n      });\r\n      toggleLoadingUI(false);\r\n      guiState.multiplier = +guiState.changeToMultiplier;\r\n      guiState.changeToMultiplier = null;\r\n    }\r\n\r\n    if (guiState.changeToOutputStride) {\r\n      // Important to purge variables and free up GPU memory\r\n      guiState.net.dispose();\r\n      toggleLoadingUI(true);\r\n      guiState.net = await posenet.load({\r\n        architecture: guiState.architecture,\r\n        outputStride: +guiState.changeToOutputStride,\r\n        inputResolution: guiState.inputResolution,\r\n        multiplier: guiState.multiplier,\r\n        quantBytes: guiState.quantBytes\r\n      });\r\n      toggleLoadingUI(false);\r\n      guiState.outputStride = +guiState.changeToOutputStride;\r\n      guiState.changeToOutputStride = null;\r\n    }\r\n\r\n    if (guiState.changeToInputResolution) {\r\n      // Important to purge variables and free up GPU memory\r\n      guiState.net.dispose();\r\n      toggleLoadingUI(true);\r\n      guiState.net = await posenet.load({\r\n        architecture: guiState.architecture,\r\n        outputStride: guiState.outputStride,\r\n        inputResolution: +guiState.changeToInputResolution,\r\n        multiplier: guiState.multiplier,\r\n        quantBytes: guiState.quantBytes\r\n      });\r\n      toggleLoadingUI(false);\r\n      guiState.inputResolution = +guiState.changeToInputResolution;\r\n      guiState.changeToInputResolution = null;\r\n    }\r\n\r\n    if (guiState.changeToQuantBytes) {\r\n      // Important to purge variables and free up GPU memory\r\n      guiState.net.dispose();\r\n      toggleLoadingUI(true);\r\n      guiState.net = await posenet.load({\r\n        architecture: guiState.architecture,\r\n        outputStride: guiState.outputStride,\r\n        inputResolution: guiState.inputResolution,\r\n        multiplier: guiState.multiplier,\r\n        quantBytes: guiState.changeToQuantBytes\r\n      });\r\n      toggleLoadingUI(false);\r\n      guiState.quantBytes = guiState.changeToQuantBytes;\r\n      guiState.changeToQuantBytes = null;\r\n    }\r\n\r\n    // Begin monitoring code for frames per second\r\n    stats.begin();\r\n\r\n    let poses = [];\r\n    let minPoseConfidence;\r\n    let minPartConfidence;\r\n    switch (guiState.algorithm) {\r\n      case 'single-pose':\r\n        const pose = await guiState.net.estimatePoses(video, {\r\n          flipHorizontal: flipPoseHorizontal,\r\n          decodingMethod: 'single-person'\r\n        });\r\n        poses = poses.concat(pose);\r\n        minPoseConfidence = +guiState.singlePoseDetection.minPoseConfidence;\r\n        minPartConfidence = +guiState.singlePoseDetection.minPartConfidence;\r\n        break;\r\n      case 'multi-pose':\r\n        let all_poses = await guiState.net.estimatePoses(video, {\r\n          flipHorizontal: flipPoseHorizontal,\r\n          decodingMethod: 'multi-person',\r\n          maxDetections: guiState.multiPoseDetection.maxPoseDetections,\r\n          scoreThreshold: guiState.multiPoseDetection.minPartConfidence,\r\n          nmsRadius: guiState.multiPoseDetection.nmsRadius\r\n        });\r\n\r\n        poses = poses.concat(all_poses);\r\n        minPoseConfidence = +guiState.multiPoseDetection.minPoseConfidence;\r\n        minPartConfidence = +guiState.multiPoseDetection.minPartConfidence;\r\n        break;\r\n    }\r\n\r\n    ctx.clearRect(0, 0, videoWidth, videoHeight);\r\n\r\n    if (guiState.output.showVideo) {\r\n      ctx.save();\r\n      ctx.scale(-1, 1);\r\n      ctx.translate(-videoWidth, 0);\r\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\r\n      ctx.restore();\r\n    }\r\n\r\n    // For each pose (i.e. person) detected in an image, loop through the poses\r\n    // and draw the resulting skeleton and keypoints if over certain confidence\r\n    // scores\r\n    poses.forEach(({score, keypoints}) => {\r\n      if (score >= minPoseConfidence) {\r\n        if (guiState.output.showPoints) {\r\n          //console.log(guiState.activity.Repetitions);\r\n          console.log('Repetitions: ', rep_count);\r\n          rep_count = rep_count + drawKeypoints(keypoints, minPartConfidence, ctx, \r\n            rep_count, wko_started, guiState.activity.Activity);\r\n\r\n          if (wko_started == 1 && done == 0){\r\n            ctx.font = \"25px Arial\"; \r\n            ctx.fillText('Repetitions: ' + Math.round(rep_count/2), 10, 90,);\r\n            ctx.fillText(guiState.activity.Activity + ' workout has started', 100, 490,);\r\n            if (timer == 0){\r\n              if (count_down == 0){\r\n                t0 = new Date() / 1000;\r\n                count_down = 1;\r\n              }\r\n              \r\n              ctx.font = \"100px Arial\"; \r\n              var now = new Date() / 1000;\r\n              if (now - t0 <= 5){\r\n                ctx.fillText(5 - Math.round(now - t0), 250, 250,);\r\n                now = new Date() / 1000;\r\n              }\r\n              else{\r\n                timer = 1;\r\n                t0 = new Date() / 1000;\r\n                rep_count = 0;\r\n              }\r\n              \r\n            }\r\n            else{\r\n              act_dur = Math.round(new Date() / 1000 - t0)\r\n              // console.log(new Date() / 1000)\r\n              console.log(\"Actual duration: \", act_dur);\r\n              console.log(\"guiState duration: \", guiState.activity.Duration_min);\r\n              console.log(\"Equal? \", act_dur == guiState.activity.Duration_min);\r\n              \r\n              ctx.fillText('Duration: ' + act_dur + 's', 430, 90,);\r\n              \r\n              if (guiState.activity.Activity == 'Weight Lifting' && Math.round(rep_count/2) == guiState.activity.Repetitions){\r\n                done = 1\r\n              }\r\n              else if (guiState.activity.Activity == 'Jumping jack' && act_dur == guiState.activity.Duration_min){\r\n                done = 1\r\n              }\r\n            }\r\n          }\r\n          else if(done == 1) {\r\n            if (wko_started == 1){\r\n              last_rep = rep_count;\r\n            }\r\n            wko_started = 0;\r\n            ctx.font = \"45px Arial\"; \r\n            ctx.fillStyle = \"green\";\r\n            ctx.fillText('DONE!!', 210, 250,);\r\n            if (guiState.activity.Activity == 'Weight Lifting'){\r\n              ctx.fillText('Duration: ' + act_dur + 's', 160, 300,);\r\n              rep_count = 0;\r\n              global_zero();\r\n            }\r\n            else if (guiState.activity.Activity == 'Jumping jack'){\r\n              ctx.fillText('Repetitions: ' + Math.round(last_rep/2), 160, 300,);\r\n              rep_count = 0;\r\n              global_zero();\r\n            }\r\n            timer = 0;\r\n          }\r\n          else if (rep_count != guiState.activity.Repetitions || done == 0){\r\n            wko_started = 0;\r\n            rep_count = 0;\r\n            global_zero();\r\n            ctx.font = \"29px Arial\"; \r\n            ctx.fillText('Workout not started, plase start a new train...', 10, 30,);\r\n          }\r\n          \r\n          \r\n\r\n        }\r\n        if (guiState.output.showSkeleton) {\r\n          drawSkeleton(keypoints, minPartConfidence, ctx);\r\n        }\r\n        if (guiState.output.showBoundingBox) {\r\n          drawBoundingBox(keypoints, ctx);\r\n        }\r\n      }\r\n    });\r\n\r\n    // End monitoring code for frames per second\r\n    stats.end();\r\n\r\n    requestAnimationFrame(poseDetectionFrame);\r\n  }\r\n\r\n  poseDetectionFrame();\r\n}\r\n\r\n/**\r\n * Kicks off the demo by loading the posenet model, finding and loading\r\n * available camera devices, and setting off the detectPoseInRealTime function.\r\n */\r\nasync function bindPage() {\r\n  toggleLoadingUI(true);\r\n  const net = await posenet.load({\r\n    architecture: guiState.input.architecture,\r\n    outputStride: guiState.input.outputStride,\r\n    inputResolution: guiState.input.inputResolution,\r\n    multiplier: guiState.input.multiplier,\r\n    quantBytes: guiState.input.quantBytes\r\n  });\r\n  toggleLoadingUI(false);\r\n\r\n  let video;\r\n\r\n  try {\r\n    video = await loadVideo();\r\n  } catch (e) {\r\n    let info = document.getElementById('info');\r\n    info.textContent = 'this browser does not support video capture,' +\r\n        'or this device does not have a camera';\r\n    info.style.display = 'block';\r\n    throw e;\r\n  }\r\n\r\n  setupGui([], net);\r\n  //setupFPS();\r\n  detectPoseInRealTime(video, net);\r\n}\r\n\r\nnavigator.getUserMedia = navigator.getUserMedia ||\r\n    navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n// kick off the demo\r\nbindPage();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DemoRecord;",{"ruleId":"84","severity":1,"message":"85","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":12},{"ruleId":"84","severity":1,"message":"88","line":5,"column":3,"nodeType":"86","messageId":"87","endLine":5,"endColumn":9},{"ruleId":"84","severity":1,"message":"89","line":7,"column":3,"nodeType":"86","messageId":"87","endLine":7,"endColumn":7},{"ruleId":"84","severity":1,"message":"90","line":8,"column":3,"nodeType":"86","messageId":"87","endLine":8,"endColumn":16},{"ruleId":"84","severity":1,"message":"91","line":9,"column":3,"nodeType":"86","messageId":"87","endLine":9,"endColumn":12},{"ruleId":"84","severity":1,"message":"92","line":12,"column":17,"nodeType":"86","messageId":"87","endLine":12,"endColumn":23},{"ruleId":"84","severity":1,"message":"93","line":13,"column":13,"nodeType":"86","messageId":"87","endLine":13,"endColumn":15},{"ruleId":"84","severity":1,"message":"94","line":14,"column":13,"nodeType":"86","messageId":"87","endLine":14,"endColumn":20},{"ruleId":"84","severity":1,"message":"95","line":15,"column":8,"nodeType":"86","messageId":"87","endLine":15,"endColumn":14},{"ruleId":"84","severity":1,"message":"96","line":17,"column":8,"nodeType":"86","messageId":"87","endLine":17,"endColumn":18},{"ruleId":"84","severity":1,"message":"93","line":3,"column":13,"nodeType":"86","messageId":"87","endLine":3,"endColumn":15},{"ruleId":"97","severity":1,"message":"98","line":125,"column":7,"nodeType":"99","messageId":"100","endLine":148,"endColumn":8},{"ruleId":"101","severity":1,"message":"102","line":45,"column":14,"nodeType":"103","messageId":"104","endLine":45,"endColumn":16},{"ruleId":"105","severity":2,"message":"106","line":203,"column":5,"nodeType":"86","messageId":"107","endLine":203,"endColumn":9},{"ruleId":"101","severity":1,"message":"102","line":209,"column":50,"nodeType":"103","messageId":"104","endLine":209,"endColumn":52},{"ruleId":"105","severity":2,"message":"106","line":220,"column":13,"nodeType":"86","messageId":"107","endLine":220,"endColumn":17},{"ruleId":"101","severity":1,"message":"102","line":220,"column":18,"nodeType":"103","messageId":"104","endLine":220,"endColumn":20},{"ruleId":"105","severity":2,"message":"106","line":221,"column":11,"nodeType":"86","messageId":"107","endLine":221,"endColumn":15},{"ruleId":"105","severity":2,"message":"106","line":224,"column":18,"nodeType":"86","messageId":"107","endLine":224,"endColumn":22},{"ruleId":"101","severity":1,"message":"102","line":224,"column":23,"nodeType":"103","messageId":"104","endLine":224,"endColumn":25},{"ruleId":"105","severity":2,"message":"106","line":225,"column":11,"nodeType":"86","messageId":"107","endLine":225,"endColumn":15},{"ruleId":"105","severity":2,"message":"106","line":229,"column":16,"nodeType":"86","messageId":"107","endLine":229,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":229,"column":21,"nodeType":"103","messageId":"104","endLine":229,"endColumn":23},{"ruleId":"105","severity":2,"message":"106","line":230,"column":9,"nodeType":"86","messageId":"107","endLine":230,"endColumn":13},{"ruleId":"84","severity":1,"message":"92","line":2,"column":17,"nodeType":"86","messageId":"87","endLine":2,"endColumn":23},{"ruleId":"84","severity":1,"message":"108","line":112,"column":7,"nodeType":"86","messageId":"87","endLine":112,"endColumn":29},{"ruleId":"84","severity":1,"message":"109","line":131,"column":3,"nodeType":"86","messageId":"87","endLine":131,"endColumn":21},{"ruleId":"97","severity":1,"message":"98","line":174,"column":5,"nodeType":"99","messageId":"100","endLine":183,"endColumn":6},{"ruleId":"84","severity":1,"message":"110","line":190,"column":10,"nodeType":"86","messageId":"87","endLine":190,"endColumn":18},{"ruleId":"97","severity":1,"message":"98","line":297,"column":5,"nodeType":"99","messageId":"100","endLine":320,"endColumn":6},{"ruleId":"101","severity":1,"message":"102","line":343,"column":27,"nodeType":"103","messageId":"104","endLine":343,"endColumn":29},{"ruleId":"101","severity":1,"message":"102","line":343,"column":40,"nodeType":"103","messageId":"104","endLine":343,"endColumn":42},{"ruleId":"101","severity":1,"message":"102","line":347,"column":23,"nodeType":"103","messageId":"104","endLine":347,"endColumn":25},{"ruleId":"101","severity":1,"message":"102","line":348,"column":30,"nodeType":"103","messageId":"104","endLine":348,"endColumn":32},{"ruleId":"101","severity":1,"message":"102","line":371,"column":46,"nodeType":"103","messageId":"104","endLine":371,"endColumn":48},{"ruleId":"101","severity":1,"message":"102","line":375,"column":46,"nodeType":"103","messageId":"104","endLine":375,"endColumn":48},{"ruleId":"101","severity":1,"message":"102","line":375,"column":93,"nodeType":"103","messageId":"104","endLine":375,"endColumn":95},{"ruleId":"101","severity":1,"message":"102","line":378,"column":51,"nodeType":"103","messageId":"104","endLine":378,"endColumn":53},{"ruleId":"101","severity":1,"message":"102","line":378,"column":80,"nodeType":"103","messageId":"104","endLine":378,"endColumn":82},{"ruleId":"101","severity":1,"message":"102","line":383,"column":24,"nodeType":"103","messageId":"104","endLine":383,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":384,"column":29,"nodeType":"103","messageId":"104","endLine":384,"endColumn":31},{"ruleId":"101","severity":1,"message":"102","line":391,"column":44,"nodeType":"103","messageId":"104","endLine":391,"endColumn":46},{"ruleId":"101","severity":1,"message":"102","line":396,"column":49,"nodeType":"103","messageId":"104","endLine":396,"endColumn":51},{"ruleId":"101","severity":1,"message":"111","line":403,"column":30,"nodeType":"103","messageId":"104","endLine":403,"endColumn":32},{"ruleId":"101","severity":1,"message":"102","line":403,"column":71,"nodeType":"103","messageId":"104","endLine":403,"endColumn":73},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","'useRef' is defined but never used.","'tf' is defined but never used.","'bodyPix' is defined but never used.","'Webcam' is defined but never used.","'DemoRecord' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-undef","'prev' is not defined.","undef","'architectureController' is assigned a value but never used.","'activityController' is assigned a value but never used.","'setupFPS' is defined but never used.","Expected '!==' and instead saw '!='."]